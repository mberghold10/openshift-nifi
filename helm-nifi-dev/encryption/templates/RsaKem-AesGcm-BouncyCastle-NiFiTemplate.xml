<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<template encoding-version="1.3">
    <description></description>
    <groupId>29d33701-017d-1000-b449-68927a1d7538</groupId>
    <name>RSAKEM+AESGCM-BouncyCastle</name>
    <snippet>
        <connections>
            <id>2f2d1a90-b988-3c22-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <bends>
                <x>1621.0</x>
                <y>246.5430734987326</y>
            </bends>
            <bends>
                <x>1621.0</x>
                <y>296.5430734987326</y>
            </bends>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>5fa23c1b-c8fb-3605-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>failure</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>5fa23c1b-c8fb-3605-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>3503f64a-0c76-3785-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>6cc53d64-0ad3-3ea6-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>success</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>2c62860d-ce9e-323a-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>55136dbf-5fa2-3b67-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>5fa23c1b-c8fb-3605-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>success</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>bb671850-9bce-325b-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>57641df0-d3ad-338d-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <bends>
                <x>778.4319115342055</x>
                <y>40.0</y>
            </bends>
            <bends>
                <x>740.8379173935805</x>
                <y>0.0</y>
            </bends>
            <bends>
                <x>706.4319115342055</x>
                <y>40.0</y>
            </bends>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>6cc53d64-0ad3-3ea6-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>failure</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>6cc53d64-0ad3-3ea6-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>79c9659a-a468-391c-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <bends>
                <x>772.342433995143</x>
                <y>502.0894775390625</y>
            </bends>
            <bends>
                <x>744.2043724717055</x>
                <y>539.4742431640625</y>
            </bends>
            <bends>
                <x>708.342433995143</x>
                <y>502.0894775390625</y>
            </bends>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>bb671850-9bce-325b-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>failure</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>bb671850-9bce-325b-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>9387d256-27ce-3275-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>5fa23c1b-c8fb-3605-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>success</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>6cc53d64-0ad3-3ea6-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <connections>
            <id>d3974ce8-6c72-31ae-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <backPressureDataSizeThreshold>1 GB</backPressureDataSizeThreshold>
            <backPressureObjectThreshold>10000</backPressureObjectThreshold>
            <destination>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>bb671850-9bce-325b-0000-000000000000</id>
                <type>PROCESSOR</type>
            </destination>
            <flowFileExpiration>0 sec</flowFileExpiration>
            <labelIndex>1</labelIndex>
            <loadBalanceCompression>DO_NOT_COMPRESS</loadBalanceCompression>
            <loadBalancePartitionAttribute></loadBalancePartitionAttribute>
            <loadBalanceStatus>LOAD_BALANCE_NOT_CONFIGURED</loadBalanceStatus>
            <loadBalanceStrategy>DO_NOT_LOAD_BALANCE</loadBalanceStrategy>
            <name></name>
            <selectedRelationships>success</selectedRelationships>
            <source>
                <groupId>4de129aa-6bfa-3ca6-0000-000000000000</groupId>
                <id>696d2a86-5ef9-30a2-0000-000000000000</id>
                <type>PROCESSOR</type>
            </source>
            <zIndex>0</zIndex>
        </connections>
        <processors>
            <id>2c62860d-ce9e-323a-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <position>
                <x>0.0</x>
                <y>63.54307349873261</y>
            </position>
            <bundle>
                <artifact>nifi-standard-nar</artifact>
                <group>org.apache.nifi</group>
                <version>1.14.0</version>
            </bundle>
            <config>
                <bulletinLevel>WARN</bulletinLevel>
                <comments></comments>
                <concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount>
                <descriptors>
                    <entry>
                        <key>Input Directory</key>
                        <value>
                            <name>Input Directory</name>
                        </value>
                    </entry>
                    <entry>
                        <key>File Filter</key>
                        <value>
                            <name>File Filter</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Path Filter</key>
                        <value>
                            <name>Path Filter</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Batch Size</key>
                        <value>
                            <name>Batch Size</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Keep Source File</key>
                        <value>
                            <name>Keep Source File</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Recurse Subdirectories</key>
                        <value>
                            <name>Recurse Subdirectories</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Polling Interval</key>
                        <value>
                            <name>Polling Interval</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Ignore Hidden Files</key>
                        <value>
                            <name>Ignore Hidden Files</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Minimum File Age</key>
                        <value>
                            <name>Minimum File Age</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Maximum File Age</key>
                        <value>
                            <name>Maximum File Age</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Minimum File Size</key>
                        <value>
                            <name>Minimum File Size</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Maximum File Size</key>
                        <value>
                            <name>Maximum File Size</name>
                        </value>
                    </entry>
                </descriptors>
                <executionNode>ALL</executionNode>
                <lossTolerant>false</lossTolerant>
                <penaltyDuration>30 sec</penaltyDuration>
                <properties>
                    <entry>
                        <key>Input Directory</key>
                        <value>/var/data/sample/input/todecrypt</value>
                    </entry>
                    <entry>
                        <key>File Filter</key>
                        <value>[^\.].*</value>
                    </entry>
                    <entry>
                        <key>Path Filter</key>
                    </entry>
                    <entry>
                        <key>Batch Size</key>
                        <value>10</value>
                    </entry>
                    <entry>
                        <key>Keep Source File</key>
                        <value>false</value>
                    </entry>
                    <entry>
                        <key>Recurse Subdirectories</key>
                        <value>true</value>
                    </entry>
                    <entry>
                        <key>Polling Interval</key>
                        <value>0 sec</value>
                    </entry>
                    <entry>
                        <key>Ignore Hidden Files</key>
                        <value>true</value>
                    </entry>
                    <entry>
                        <key>Minimum File Age</key>
                        <value>0 sec</value>
                    </entry>
                    <entry>
                        <key>Maximum File Age</key>
                    </entry>
                    <entry>
                        <key>Minimum File Size</key>
                        <value>0 B</value>
                    </entry>
                    <entry>
                        <key>Maximum File Size</key>
                    </entry>
                </properties>
                <runDurationMillis>0</runDurationMillis>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <yieldDuration>1 sec</yieldDuration>
            </config>
            <executionNodeRestricted>false</executionNodeRestricted>
            <name>GetFile</name>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>success</name>
            </relationships>
            <state>STOPPED</state>
            <style/>
            <type>org.apache.nifi.processors.standard.GetFile</type>
        </processors>
        <processors>
            <id>5fa23c1b-c8fb-3605-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <position>
                <x>1152.0</x>
                <y>207.5430734987326</y>
            </position>
            <bundle>
                <artifact>nifi-standard-nar</artifact>
                <group>org.apache.nifi</group>
                <version>1.14.0</version>
            </bundle>
            <config>
                <bulletinLevel>WARN</bulletinLevel>
                <comments></comments>
                <concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount>
                <descriptors>
                    <entry>
                        <key>Directory</key>
                        <value>
                            <name>Directory</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Conflict Resolution Strategy</key>
                        <value>
                            <name>Conflict Resolution Strategy</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Create Missing Directories</key>
                        <value>
                            <name>Create Missing Directories</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Maximum File Count</key>
                        <value>
                            <name>Maximum File Count</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Last Modified Time</key>
                        <value>
                            <name>Last Modified Time</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Permissions</key>
                        <value>
                            <name>Permissions</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Owner</key>
                        <value>
                            <name>Owner</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Group</key>
                        <value>
                            <name>Group</name>
                        </value>
                    </entry>
                </descriptors>
                <executionNode>ALL</executionNode>
                <lossTolerant>false</lossTolerant>
                <penaltyDuration>30 sec</penaltyDuration>
                <properties>
                    <entry>
                        <key>Directory</key>
                        <value>/var/data/sample/output</value>
                    </entry>
                    <entry>
                        <key>Conflict Resolution Strategy</key>
                        <value>fail</value>
                    </entry>
                    <entry>
                        <key>Create Missing Directories</key>
                        <value>true</value>
                    </entry>
                    <entry>
                        <key>Maximum File Count</key>
                    </entry>
                    <entry>
                        <key>Last Modified Time</key>
                    </entry>
                    <entry>
                        <key>Permissions</key>
                    </entry>
                    <entry>
                        <key>Owner</key>
                    </entry>
                    <entry>
                        <key>Group</key>
                    </entry>
                </properties>
                <runDurationMillis>0</runDurationMillis>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <yieldDuration>1 sec</yieldDuration>
            </config>
            <executionNodeRestricted>false</executionNodeRestricted>
            <name>PutFile</name>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>failure</name>
            </relationships>
            <relationships>
                <autoTerminate>true</autoTerminate>
                <name>success</name>
            </relationships>
            <state>STOPPED</state>
            <style/>
            <type>org.apache.nifi.processors.standard.PutFile</type>
        </processors>
        <processors>
            <id>696d2a86-5ef9-30a2-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <position>
                <x>0.0</x>
                <y>351.5430734987326</y>
            </position>
            <bundle>
                <artifact>nifi-standard-nar</artifact>
                <group>org.apache.nifi</group>
                <version>1.14.0</version>
            </bundle>
            <config>
                <bulletinLevel>WARN</bulletinLevel>
                <comments></comments>
                <concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount>
                <descriptors>
                    <entry>
                        <key>Input Directory</key>
                        <value>
                            <name>Input Directory</name>
                        </value>
                    </entry>
                    <entry>
                        <key>File Filter</key>
                        <value>
                            <name>File Filter</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Path Filter</key>
                        <value>
                            <name>Path Filter</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Batch Size</key>
                        <value>
                            <name>Batch Size</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Keep Source File</key>
                        <value>
                            <name>Keep Source File</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Recurse Subdirectories</key>
                        <value>
                            <name>Recurse Subdirectories</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Polling Interval</key>
                        <value>
                            <name>Polling Interval</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Ignore Hidden Files</key>
                        <value>
                            <name>Ignore Hidden Files</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Minimum File Age</key>
                        <value>
                            <name>Minimum File Age</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Maximum File Age</key>
                        <value>
                            <name>Maximum File Age</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Minimum File Size</key>
                        <value>
                            <name>Minimum File Size</name>
                        </value>
                    </entry>
                    <entry>
                        <key>Maximum File Size</key>
                        <value>
                            <name>Maximum File Size</name>
                        </value>
                    </entry>
                </descriptors>
                <executionNode>ALL</executionNode>
                <lossTolerant>false</lossTolerant>
                <penaltyDuration>30 sec</penaltyDuration>
                <properties>
                    <entry>
                        <key>Input Directory</key>
                        <value>/var/data/sample/input/toencrypt</value>
                    </entry>
                    <entry>
                        <key>File Filter</key>
                        <value>[^\.].*</value>
                    </entry>
                    <entry>
                        <key>Path Filter</key>
                    </entry>
                    <entry>
                        <key>Batch Size</key>
                        <value>10</value>
                    </entry>
                    <entry>
                        <key>Keep Source File</key>
                        <value>false</value>
                    </entry>
                    <entry>
                        <key>Recurse Subdirectories</key>
                        <value>true</value>
                    </entry>
                    <entry>
                        <key>Polling Interval</key>
                        <value>0 sec</value>
                    </entry>
                    <entry>
                        <key>Ignore Hidden Files</key>
                        <value>true</value>
                    </entry>
                    <entry>
                        <key>Minimum File Age</key>
                        <value>0 sec</value>
                    </entry>
                    <entry>
                        <key>Maximum File Age</key>
                    </entry>
                    <entry>
                        <key>Minimum File Size</key>
                        <value>0 B</value>
                    </entry>
                    <entry>
                        <key>Maximum File Size</key>
                    </entry>
                </properties>
                <runDurationMillis>0</runDurationMillis>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <yieldDuration>1 sec</yieldDuration>
            </config>
            <executionNodeRestricted>false</executionNodeRestricted>
            <name>GetFile</name>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>success</name>
            </relationships>
            <state>STOPPED</state>
            <style/>
            <type>org.apache.nifi.processors.standard.GetFile</type>
        </processors>
        <processors>
            <id>6cc53d64-0ad3-3ea6-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <position>
                <x>560.0</x>
                <y>63.54307349873261</y>
            </position>
            <bundle>
                <artifact>nifi-groovyx-nar</artifact>
                <group>org.apache.nifi</group>
                <version>1.14.0</version>
            </bundle>
            <config>
                <bulletinLevel>WARN</bulletinLevel>
                <comments></comments>
                <concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount>
                <descriptors>
                    <entry>
                        <key>groovyx-script-file</key>
                        <value>
                            <name>groovyx-script-file</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-script-body</key>
                        <value>
                            <name>groovyx-script-body</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-failure-strategy</key>
                        <value>
                            <name>groovyx-failure-strategy</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-additional-classpath</key>
                        <value>
                            <name>groovyx-additional-classpath</name>
                        </value>
                    </entry>
                    <entry>
                        <key>keysFolder</key>
                        <value>
                            <name>keysFolder</name>
                        </value>
                    </entry>
                </descriptors>
                <executionNode>ALL</executionNode>
                <lossTolerant>false</lossTolerant>
                <penaltyDuration>0 sec</penaltyDuration>
                <properties>
                    <entry>
                        <key>groovyx-script-file</key>
                    </entry>
                    <entry>
                        <key>groovyx-script-body</key>
                        <value>import org.apache.nifi.processors.groovyx.flow.GroovySessionFile

import java.math.BigInteger;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.nio.charset.StandardCharsets;
import java.nio.file.Paths;
import java.io.FileReader;
import java.io.ByteArrayOutputStream;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.modes.GCMBlockCipher;
import org.bouncycastle.crypto.engines.AESFastEngine;
import org.bouncycastle.crypto.params.KDFParameters;
import org.bouncycastle.crypto.params.AEADParameters;
import org.bouncycastle.crypto.params.HKDFParameters;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.bouncycastle.crypto.util.PrivateKeyFactory;
import org.bouncycastle.crypto.generators.HKDFBytesGenerator;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;
import org.bouncycastle.util.BigIntegers;
import org.bouncycastle.openssl.PEMParser;

/**
 * The RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
 */
public class RSAKeyEncapsulation
{
    private static final BigInteger ZERO = BigInteger.valueOf(0);
    private static final BigInteger ONE = BigInteger.valueOf(1);

    private DerivationFunction kdf;
    private SecureRandom rnd;
    private RSAKeyParameters key;
    private byte[] additionalInfo;
    private byte[] salt;

    /**
     * Set up the RSA-KEM.
     *
     * @param kdf the key derivation function to be used.
     * @param rnd the random source for the session key.
     */
    public RSAKeyEncapsulation(
	DerivationFunction kdf,
	SecureRandom rnd)
    {
	this.kdf = kdf;
	this.rnd = rnd;
    }

    /**
     * Initialise the RSA-KEM.
     *
     * @param key the recipient's public (for encryption) or private (for decryption) key.
     */
    public void init(CipherParameters key, byte[] salt, byte[] additionalInfo)
	throws IllegalArgumentException
    {
	if (!(key instanceof RSAKeyParameters))
	{
	    throw new IllegalArgumentException("RSA key required");
	}

	this.key = (RSAKeyParameters)key;
		this.salt = salt;
		this.additionalInfo = additionalInfo;
    }

    /**
     * Generate and encapsulate a random session key.
     *
     * @param out    the output cipherTextBuffer for the encapsulated key.
     * @param outOff the offset for the output cipherTextBuffer.
     * @param keyLen the length of the random session key.
     * @return the random session key.
     */
    public byte[] encrypt(byte[] out, int outOff, int keyLen)
	throws IllegalArgumentException
    {
	if (key.isPrivate())
	{
	    throw new IllegalArgumentException("Public key required for encryption");
	}

	BigInteger n = key.getModulus();
	BigInteger e = key.getExponent();

	// Generate the ephemeral random and encode it    
	BigInteger r = BigIntegers.createRandomInRange(ZERO, n.subtract(ONE), rnd);

	// Encrypt the random and encode it     
	BigInteger c = r.modPow(e, n);
	byte[] C = BigIntegers.asUnsignedByteArray(((n.bitLength() + 7) / 8).intValue(), c);
	System.arraycopy(C, 0, out, outOff, C.length);

	return generateKey(n, r, keyLen);
    }

    /**
     * Generate and encapsulate a random session key.
     *
     * @param out    the output cipherTextBuffer for the encapsulated key.
     * @param keyLen the length of the random session key.
     * @return the random session key.
     */
    public byte[] encrypt(byte[] out, int keyLen)
    {
	return encrypt(out, 0, keyLen);
    }

    /**
     * Decrypt an encapsulated session key.
     *
     * @param in     the input cipherTextBuffer for the encapsulated key.
     * @param inOff  the offset for the input cipherTextBuffer.
     * @param inLen  the length of the encapsulated key.
     * @param keyLen the length of the session key.
     * @return the session key.
     */
    public byte[] decrypt(byte[] inByte, int inOff, int inLen, int keyLen)
	throws IllegalArgumentException
    {
	if (!key.isPrivate())
	{
	    throw new IllegalArgumentException("Private key required for decryption");
	}

	BigInteger n = key.getModulus();
	BigInteger d = key.getExponent();

	// Decode the input
	byte[] C = new byte[inLen];
	System.arraycopy(inByte, inOff, C, 0, C.length);
	BigInteger c = new BigInteger(1, C);

	// Decrypt the ephemeral random and encode it
	BigInteger r = c.modPow(d, n);

	return generateKey(n, r, keyLen);
    }

    /**
     * Decrypt an encapsulated session key.
     *
     * @param in     the input cipherTextBuffer for the encapsulated key.
     * @param keyLen the length of the session key.
     * @return the session key.
     */
    public byte[] decrypt(byte[] inByte, int keyLen)
    {
	return decrypt(inByte, 0, inByte.length, keyLen);
    }

    protected byte[] generateKey(BigInteger n, BigInteger r, int keyLen)
    {
	byte[] R = BigIntegers.asUnsignedByteArray(((n.bitLength() + 7) / 8).intValue(), r);

	// Initialise the KDF
	kdf.init(new HKDFParameters(R, salt, additionalInfo));

	// Generate the secret key
	byte[] K = new byte[keyLen];
	kdf.generateBytes(K, 0, K.length);

	return K;
    }
}

public class BytesManipulation
{
	private static final char[] HEX_ARRAY = "0123456789abcdef".toCharArray();
	
	public static byte[] hexToBytes(String hex)
	{
		int len = hex.length();
		byte[] bytes = new byte[len / 2];
		for (int i = 0; i &lt; len; i += 2) {
			bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) &lt;&lt; 4)
								 + Character.digit(hex.charAt(i+1), 16));
		}
		return bytes;
	}

	public static String bytesToHex(byte[] ba)
	{
		byte[] hexChars = new byte[ba.length * 2];
		for (int j = 0; j &lt; ba.length; j++) {
			int v = ba[j] &amp; 0xFF;
			hexChars[j * 2] = HEX_ARRAY[v &gt;&gt;&gt; 4];
			hexChars[j * 2 + 1] = HEX_ARRAY[v &amp; 0x0F];
		}
		return new String(hexChars, StandardCharsets.UTF_8);
	}

	public static String byteGuidToHex(byte[] ba)
	{
		String hexGuid = bytesToHex(ba);
		if(hexGuid.length() == 32)
		{
			return hexGuid.substring(0,8) + "-" + hexGuid.substring(8,12) + "-" + hexGuid.substring(12,16) + "-" + hexGuid.substring(16,20) + "-" + hexGuid.substring(20,32)
		}
		else
		{
			return ""
		}
	}
}

private GCMBlockCipher parseInitialValuesFromStreamAndSetUpCipher(InputStream inStream, byte[] additionalInfo)
{
	byte[] keyID = new byte[16]
	byte[] encryptedAESKeyInputMaterial = new byte[512]
	byte[] aesInitializationVector = new byte[12]
	
	
	//parse key ID, encrypted key material, and AES IV
	int numBytesRead = inStream.read(keyID)
	if(numBytesRead != 16)
	{
		throw new IOException("Could not read key ID from flow file")
	}
	numBytesRead = inStream.read(encryptedAESKeyInputMaterial)
	if(numBytesRead != 512)
	{
		throw new IOException("Could not read key material from flow file")
	}
	numBytesRead = inStream.read(aesInitializationVector)
	if(numBytesRead != 12)
	{
		throw new IOException("Could not read initialization vector from flow file")
	}
	
	//load the private key
	String keyFilePath = Paths.get(keysFolder.value, BytesManipulation.byteGuidToHex(keyID) + "_private.pem");
	FileReader reader = new FileReader(keyFilePath)
	RSAPrivateCrtKeyParameters privateKey = (RSAPrivateCrtKeyParameters)PrivateKeyFactory.createKey((PrivateKeyInfo)new PEMParser(reader).readObject());
	reader.close()
	
	//derive the AES key from the key material input
	HKDFBytesGenerator hkdfBytesGenerator = new HKDFBytesGenerator(new SHA256Digest());
	RSAKeyEncapsulation rsaKE = new RSAKeyEncapsulation(hkdfBytesGenerator, new SecureRandom());
	rsaKE.init(privateKey, keyID, additionalInfo);
	byte[] aesKey = rsaKE.decrypt(encryptedAESKeyInputMaterial, 32);
	
	//prepare the cipher to decrypt
	GCMBlockCipher cipher = new GCMBlockCipher(new AESFastEngine());
	AEADParameters gcmParameters = new AEADParameters(new KeyParameter(aesKey), 128, aesInitializationVector);
	cipher.init(false, gcmParameters);

	return cipher
}


GroovySessionFile flowFile = session.get()
if(!flowFile) return

File folder = new File(keysFolder.value)
if(!folder.exists())
{
	throw new IOException("Key folder not found")
	session.transfer(flowFile, REL_FAILURE)
	return
}

try
{
	final long MAX_AESGCM_SIZE = 68719476704;
	final int AES_GCM_TAG_SIZE = 16;
	byte[] additionalInfo = flowFile.filename.getBytes('UTF8');
	GCMBlockCipher cipher;

	//decrypt the incoming flow file
	flowFile = session.write(flowFile, {cipherTextStream, plainTextStream -&gt;
		//decrypt the input stream to the output stream
		final int bufferSize = 128*1024;
		byte[] cipherTextBuffer = new byte[bufferSize];
		byte[] plainTextBuffer = new byte[bufferSize];
		int numBytesRead = 0;
		long totalBytesRead = 0;
		long plainTextPosition = 0;
		
		while(plainTextPosition &lt; flowFile.getSize()) {
			cipher = parseInitialValuesFromStreamAndSetUpCipher(cipherTextStream, additionalInfo);
			plainTextPosition += 16 + 12 + 512; //uuid, IV, key material
			
			while (totalBytesRead &lt; MAX_AESGCM_SIZE + AES_GCM_TAG_SIZE &amp;&amp; (numBytesRead = cipherTextStream.read(cipherTextBuffer, 0, cipherTextBuffer.length)) &gt; 0)
			{
				totalBytesRead += numBytesRead;
				plainTextPosition += numBytesRead;
				numBytesRead = cipher.processBytes(cipherTextBuffer, 0, numBytesRead, plainTextBuffer, 0);
				plainTextStream.write(plainTextBuffer, 0, numBytesRead);

				//does the cipherTextBuffer need to be reset
				if (cipherTextBuffer.length &lt; bufferSize)
					cipherTextBuffer = new byte[bufferSize];

				//are we within one cipherTextBuffer of MAX_AESGCM_SIZE?
				if (MAX_AESGCM_SIZE - totalBytesRead + AES_GCM_TAG_SIZE &lt; cipherTextBuffer.length)
					cipherTextBuffer = new byte[MAX_AESGCM_SIZE - totalBytesRead + AES_GCM_TAG_SIZE];
			}
			cipherTextBuffer = new byte[1024];
			numBytesRead = cipher.doFinal(cipherTextBuffer, 0);
			plainTextStream.write(cipherTextBuffer, 0, numBytesRead);
			totalBytesRead = 0;
		}
	} as StreamCallback)

	if(flowFile.filename.toLowerCase().endsWith('.enc'))
		flowFile = session.putAttribute(flowFile, 'filename', flowFile.filename.substring(0, flowFile.filename.length() - 4));
	session.transfer(flowFile, REL_SUCCESS)
}
catch (Exception e)
{
	log.error("Exception in decrypt: " + e.getMessage());
	session.transfer(flowFile, REL_FAILURE);
}</value>
                    </entry>
                    <entry>
                        <key>groovyx-failure-strategy</key>
                        <value>rollback</value>
                    </entry>
                    <entry>
                        <key>groovyx-additional-classpath</key>
                        <value>/opt/AESGCM/libs/bcpkix-jdk15on-169.jar;/opt/AESGCM/libs/bcprov-jdk15on-169.jar</value>
                    </entry>
                    <entry>
                        <key>keysFolder</key>
                        <value>/var/data/sample/keys</value>
                    </entry>
                </properties>
                <runDurationMillis>0</runDurationMillis>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <yieldDuration>1 sec</yieldDuration>
            </config>
            <executionNodeRestricted>false</executionNodeRestricted>
            <name>Decrypt</name>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>failure</name>
            </relationships>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>success</name>
            </relationships>
            <state>STOPPED</state>
            <style/>
            <type>org.apache.nifi.processors.groovyx.ExecuteGroovyScript</type>
        </processors>
        <processors>
            <id>bb671850-9bce-325b-0000-000000000000</id>
            <parentGroupId>4de129aa-6bfa-3ca6-0000-000000000000</parentGroupId>
            <position>
                <x>560.0</x>
                <y>351.5430734987326</y>
            </position>
            <bundle>
                <artifact>nifi-groovyx-nar</artifact>
                <group>org.apache.nifi</group>
                <version>1.14.0</version>
            </bundle>
            <config>
                <bulletinLevel>WARN</bulletinLevel>
                <comments></comments>
                <concurrentlySchedulableTaskCount>1</concurrentlySchedulableTaskCount>
                <descriptors>
                    <entry>
                        <key>groovyx-script-file</key>
                        <value>
                            <name>groovyx-script-file</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-script-body</key>
                        <value>
                            <name>groovyx-script-body</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-failure-strategy</key>
                        <value>
                            <name>groovyx-failure-strategy</name>
                        </value>
                    </entry>
                    <entry>
                        <key>groovyx-additional-classpath</key>
                        <value>
                            <name>groovyx-additional-classpath</name>
                        </value>
                    </entry>
                    <entry>
                        <key>keysFolder</key>
                        <value>
                            <name>keysFolder</name>
                        </value>
                    </entry>
                    <entry>
                        <key>keyUUID</key>
                        <value>
                            <name>keyUUID</name>
                        </value>
                    </entry>
                </descriptors>
                <executionNode>ALL</executionNode>
                <lossTolerant>false</lossTolerant>
                <penaltyDuration>0 sec</penaltyDuration>
                <properties>
                    <entry>
                        <key>groovyx-script-file</key>
                    </entry>
                    <entry>
                        <key>groovyx-script-body</key>
                        <value>import org.apache.nifi.processors.groovyx.flow.GroovySessionFile;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
import java.security.GeneralSecurityException;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import javax.crypto.spec.GCMParameterSpec;
import java.nio.charset.StandardCharsets;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.channels.WritableByteChannel;
import java.nio.file.Paths;
import java.io.FileReader;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;

import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.modes.GCMBlockCipher;
import org.bouncycastle.crypto.engines.AESFastEngine;
import org.bouncycastle.crypto.params.KDFParameters;
import org.bouncycastle.crypto.params.AEADParameters;
import org.bouncycastle.crypto.params.HKDFParameters;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.crypto.params.RSAKeyParameters;
import org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;
import org.bouncycastle.crypto.util.PublicKeyFactory;
import org.bouncycastle.crypto.generators.HKDFBytesGenerator;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.util.BigIntegers;
import org.bouncycastle.openssl.PEMParser;

/**
 * The RSA Key Encapsulation Mechanism (RSA-KEM) from ISO 18033-2.
 */
public class RSAKeyEncapsulation
{
    private static final BigInteger ZERO = BigInteger.valueOf(0);
    private static final BigInteger ONE = BigInteger.valueOf(1);

    private DerivationFunction kdf;
    private SecureRandom rnd;
    private RSAKeyParameters key;
    private byte[] additionalInfo;
    private byte[] salt;

    /**
     * Set up the RSA-KEM.
     *
     * @param kdf the key derivation function to be used.
     * @param rnd the random source for the session key.
     */
    public RSAKeyEncapsulation(
        DerivationFunction kdf,
        SecureRandom rnd)
    {
        this.kdf = kdf;
        this.rnd = rnd;
    }

    /**
     * Initialise the RSA-KEM.
     *
     * @param key the recipient's public (for encryption) or private (for decryption) key.
     */
    public void init(CipherParameters key, byte[] salt, byte[] additionalInfo)
        throws IllegalArgumentException
    {
        if (!(key instanceof RSAKeyParameters))
        {
            throw new IllegalArgumentException("RSA key required");
        }

        this.key = (RSAKeyParameters)key;
		this.salt = salt;
		this.additionalInfo = additionalInfo;
    }

    /**
     * Generate and encapsulate a random session key.
     *
     * @param out    the output buffer for the encapsulated key.
     * @param outOff the offset for the output buffer.
     * @param keyLen the length of the random session key.
     * @return the random session key.
     */
    public byte[] encrypt(byte[] out, int outOff, int keyLen)
        throws IllegalArgumentException
    {
        if (key.isPrivate())
        {
            throw new IllegalArgumentException("Public key required for encryption");
        }

        BigInteger n = key.getModulus();
        BigInteger e = key.getExponent();

        // Generate the ephemeral random and encode it    
        BigInteger r = BigIntegers.createRandomInRange(ZERO, n.subtract(ONE), rnd);

        // Encrypt the random and encode it     
        BigInteger c = r.modPow(e, n);
        byte[] C = BigIntegers.asUnsignedByteArray(((n.bitLength() + 7) / 8).intValue(), c);
        System.arraycopy(C, 0, out, outOff, C.length);

        return generateKey(n, r, keyLen);
    }

    /**
     * Generate and encapsulate a random session key.
     *
     * @param out    the output buffer for the encapsulated key.
     * @param keyLen the length of the random session key.
     * @return the random session key.
     */
    public byte[] encrypt(byte[] out, int keyLen)
    {
        return encrypt(out, 0, keyLen);
    }

    /**
     * Decrypt an encapsulated session key.
     *
     * @param in     the input buffer for the encapsulated key.
     * @param inOff  the offset for the input buffer.
     * @param inLen  the length of the encapsulated key.
     * @param keyLen the length of the session key.
     * @return the session key.
     */
    public byte[] decrypt(byte[] inByte, int inOff, int inLen, int keyLen)
        throws IllegalArgumentException
    {
        if (!key.isPrivate())
        {
            throw new IllegalArgumentException("Private key required for decryption");
        }

        BigInteger n = key.getModulus();
        BigInteger d = key.getExponent();

        // Decode the input
        byte[] C = new byte[inLen];
        System.arraycopy(inByte, inOff, C, 0, C.length);
        BigInteger c = new BigInteger(1, C);

        // Decrypt the ephemeral random and encode it
        BigInteger r = c.modPow(d, n);

        return generateKey(n, r, keyLen);
    }

    /**
     * Decrypt an encapsulated session key.
     *
     * @param in     the input buffer for the encapsulated key.
     * @param keyLen the length of the session key.
     * @return the session key.
     */
    public byte[] decrypt(byte[] inByte, int keyLen)
    {
        return decrypt(inByte, 0, inByte.length, keyLen);
    }

    protected byte[] generateKey(BigInteger n, BigInteger r, int keyLen)
    {
        byte[] R = BigIntegers.asUnsignedByteArray(((n.bitLength() + 7) / 8).intValue(), r);

        // Initialise the KDF
        kdf.init(new HKDFParameters(R, salt, additionalInfo));

        // Generate the secret key
        byte[] K = new byte[keyLen];
        kdf.generateBytes(K, 0, K.length);

        return K;
    }
}

public class BytesManipulation
{
	private static final char[] HEX_ARRAY = "0123456789abcdef".toCharArray();
	
	public static byte[] hexToBytes(String hex)
	{
		int len = hex.length();
		byte[] bytes = new byte[len / 2];
		for (int i = 0; i &lt; len; i += 2) {
			bytes[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) &lt;&lt; 4)
								 + Character.digit(hex.charAt(i+1), 16));
		}
		return bytes;
	}

	public static String bytesToHex(byte[] ba)
	{
		byte[] hexChars = new byte[ba.length * 2];
		for (int j = 0; j &lt; ba.length; j++) {
			int v = ba[j] &amp; 0xFF;
			hexChars[j * 2] = HEX_ARRAY[v &gt;&gt;&gt; 4];
			hexChars[j * 2 + 1] = HEX_ARRAY[v &amp; 0x0F];
		}
		return new String(hexChars, StandardCharsets.UTF_8);
	}

	public static String byteGuidToHex(byte[] ba)
	{
		String hexGuid = bytesToHex(ba);
		if(hexGuid.length() == 32)
		{
			return hexGuid.substring(0,8) + "-" + hexGuid.substring(8,12) + "-" + hexGuid.substring(12,16) + "-" + hexGuid.substring(16,20) + "-" + hexGuid.substring(20,32)
		}
		else
		{
			return ""
		}
	}
}

private GCMBlockCipher generateInitialValuesAndSetUpCipher(OutputStream outStream, String keyUUID, String keyFolder, byte[] additionalInfo)
{
	try
	{
		SecureRandom random = new SecureRandom();
		byte[] keyID = BytesManipulation.hexToBytes(keyUUID.replace("-", ""));
		byte[] aesInitializationVector = new byte[12];
		random.nextBytes(aesInitializationVector);
		
		//load the public key
		FileReader reader = new FileReader(Paths.get(keyFolder, keyUUID + "_public.pem").toString());
		PEMParser parser = new PEMParser(reader);
		RSAKeyParameters publicKey = (RSAKeyParameters)PublicKeyFactory.createKey((SubjectPublicKeyInfo)parser.readObject());
		parser.close();
		reader.close();
		
		//derive the AES key from the key material input
		HKDFBytesGenerator hkdfBytesGenerator = new HKDFBytesGenerator(new SHA256Digest());
		RSAKeyEncapsulation rsaKE = new RSAKeyEncapsulation(hkdfBytesGenerator, new SecureRandom());
		rsaKE.init(publicKey, keyID, additionalInfo);
		byte[] encryptedAesKeyInputMaterial = new byte[512];
		byte[] aesKey = rsaKE.encrypt(encryptedAesKeyInputMaterial, 32);
		
		//write parameters to output stream
		outStream.write(keyID);
		outStream.write(encryptedAesKeyInputMaterial);
		outStream.write(aesInitializationVector);

		//Creates a GCMBlockCipher instance with the transformation and properties.
		GCMBlockCipher cipher = new GCMBlockCipher(new AESFastEngine());
		AEADParameters gcmParameters = new AEADParameters(new KeyParameter(aesKey), 128, aesInitializationVector);
		cipher.init(true, gcmParameters);
		return cipher;
	}
	catch(IOException | GeneralSecurityException e)
	{
		log.error("Caught error in generateInitialValuesAndSetUpCipher: " + e.getMessage());
		return null;
	}
}


GroovySessionFile flowFile = session.get()
if(!flowFile) return

File folder = new File(keysFolder.value)
if(!folder.exists())
{
	throw new IOException("Key folder not found")
	session.transfer(flowFile, REL_FAILURE)
	return
}

try
{
	final long MAX_AESGCM_SIZE = 68719476704;
	final int AES_GCM_TAG_SIZE = 16;
	byte[] additionalInfo = (flowFile.filename + ".enc").getBytes('UTF8');
	boolean isValidDecrypt = false;

	//encrypt the incoming flow file
	flowFile = session.write(flowFile, {plainTextStream, cipherTextStream -&gt;
		final int bufferSize = 128*1024;
		byte[] plainTextBuffer;
		byte[] cipherTextBuffer = new byte[bufferSize];
		long plainTextPosition = 0;
		int numBytesRead = 0;
		long totalBytesRead = 0;
		
		long flowFileSize = flowFile.getSize();
		while(plainTextPosition &lt; flowFileSize)
		{
			GCMBlockCipher cipher = generateInitialValuesAndSetUpCipher(cipherTextStream, keyUUID.value, keysFolder.value, additionalInfo);
			plainTextBuffer = new byte[bufferSize];
			
			if(!cipher) {
				log.error("Failed to configure cipher.  Routing to failure.");
				throw new IOException("Failed to configure cipher.  Routing to failure.");
			}

			while (totalBytesRead &lt; MAX_AESGCM_SIZE &amp;&amp; (numBytesRead = plainTextStream.read(plainTextBuffer, 0, plainTextBuffer.length)) &gt; 0)
			{
				totalBytesRead += numBytesRead;
				plainTextPosition += numBytesRead;
				numBytesRead = cipher.processBytes(plainTextBuffer, 0, numBytesRead, cipherTextBuffer, 0);
				cipherTextStream.write(cipherTextBuffer, 0, numBytesRead);
				
				//was the buffer size reset last pass?
				if(plainTextBuffer.length &lt; bufferSize)
					plainTextBuffer = new byte[bufferSize];
				
				//are we within one round of the end of MAX_AESGCM_SIZE?
				if(totalBytesRead + plainTextBuffer.length &gt; MAX_AESGCM_SIZE)
					plainTextBuffer = new byte[(int)(MAX_AESGCM_SIZE - totalBytesRead)];
				
				//are we within one round of the end of the file?
				if(flowFileSize - plainTextPosition &lt; plainTextBuffer.length)
					plainTextBuffer = new byte[(int)(flowFileSize - plainTextPosition)];
			}
			
			//write gcm tag
			numBytesRead = cipher.doFinal(cipherTextBuffer, 0);
			cipherTextStream.write(cipherTextBuffer, 0, numBytesRead);
			totalBytesRead = 0;
		}
	} as StreamCallback)

	flowFile = session.putAttribute(flowFile, "filename", flowFile.filename + ".enc");
	session.transfer(flowFile, REL_SUCCESS);
}
catch (Exception e)
{
	log.error("Exception in encrypt: " + e.getMessage());
	session.transfer(flowFile, REL_FAILURE);
}</value>
                    </entry>
                    <entry>
                        <key>groovyx-failure-strategy</key>
                        <value>rollback</value>
                    </entry>
                    <entry>
                        <key>groovyx-additional-classpath</key>
                        <value>/opt/AESGCM/libs/bcpkix-jdk15on-169.jar;/opt/AESGCM/libs/bcprov-jdk15on-169.jar</value>
                    </entry>
                    <entry>
                        <key>keysFolder</key>
                        <value>/var/data/sample/keys</value>
                    </entry>
                    <entry>
                        <key>keyUUID</key>
                        <value>3122f0a5-9daa-4cc6-8c79-2af712fd5857</value>
                    </entry>
                </properties>
                <runDurationMillis>0</runDurationMillis>
                <schedulingPeriod>0 sec</schedulingPeriod>
                <schedulingStrategy>TIMER_DRIVEN</schedulingStrategy>
                <yieldDuration>1 sec</yieldDuration>
            </config>
            <executionNodeRestricted>false</executionNodeRestricted>
            <name>Encrypt</name>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>failure</name>
            </relationships>
            <relationships>
                <autoTerminate>false</autoTerminate>
                <name>success</name>
            </relationships>
            <state>STOPPED</state>
            <style/>
            <type>org.apache.nifi.processors.groovyx.ExecuteGroovyScript</type>
        </processors>
    </snippet>
    <timestamp>11/19/2021 09:37:11 UTC</timestamp>
</template>
