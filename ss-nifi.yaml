---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nifi
  labels:
    app: "nifi"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nifi
  template:
    metadata:
      labels:
        app: "nifi"
    spec:
      serviceAccountName: nifi-sa
      terminationGracePeriodSeconds: 30
      containers:
        - name: server
          imagePullPolicy: "Always"
          image: nifi
          command:
            - bash
            - -ce
            - |
              set -x
              scripts_dir='/opt/nifi/scripts'

              prop_replace () {
                target_file=${NIFI_HOME}/conf/${3:-nifi.properties}
                echo "updating ${1} in ${target_file}"
                if egrep "^${1}=" ${target_file} &> /dev/null; then
                  sed -i -e "s|^$1=.*$|$1=$2|"  ${target_file}
                else
                  echo ${1}=${2} >> ${target_file}
                fi
              }

              FQDN=$(hostname -f)

              cat "${NIFI_HOME}/conf/nifi.temp" > "${NIFI_HOME}/conf/nifi.properties"
              
              if [[ $(grep $(hostname) conf/authorizers.temp) ]]; then
                cat "${NIFI_HOME}/conf/authorizers.temp" > "${NIFI_HOME}/conf/authorizers.xml"
              else
                cat "${NIFI_HOME}/conf/authorizers.empty" > "${NIFI_HOME}/conf/authorizers.xml"
              fi

              if ! test -f ${NIFI_HOME}/conf/login-identity-providers.xml; then
                cat "${NIFI_HOME}/conf/login-identity-providers.temp" > "${NIFI_HOME}/conf/login-identity-providers.xml"
              fi

              if ! test -f /opt/nifi/data/flow.xml.gz && test -f /opt/nifi/data/flow.xml; then
                gzip /opt/nifi/data/flow.xml
              fi

              prop_replace nifi.remote.input.host ${FQDN}
              prop_replace nifi.web.http.host ${FQDN}

              # Update nifi.properties for security properties
              prop_replace nifi.web.http.network.interface.default "eth0" nifi.properties
              prop_replace nifi.web.http.network.interface.lo "lo" nifi.properties

              if [ -n "${NIFI_SENSITIVE_PROPS_KEY}" ]; then
                  prop_replace 'nifi.sensitive.props.key' "${NIFI_SENSITIVE_PROPS_KEY}"
              fi

              bin/nifi.sh set-single-user-credentials $(admin_identity) $(admin_password)

              exec bin/nifi.sh run & nifi_pid="$!"

              echo NiFi running with PID ${nifi_pid}.
              wait ${nifi_pid}

              exec bin/nifi.sh run
          resources:
            limits:
              cpu: 3500m
              memory: 6Gi
            requests:
              cpu: '2'
              memory: 2Gi
          ports:
            - containerPort: 8443
              name: http
              protocol: TCP
          env:
            - name: NIFI_SENSITIVE_PROPS_KEY
              value: "1234567890123456789"
          readinessProbe:
            initialDelaySeconds: 60
            periodSeconds: 20
            tcpSocket:
              port: 8443
          livenessProbe:
            initialDelaySeconds: 90
            periodSeconds: 60
            tcpSocket:
              port: 8443
          volumeMounts:
            - name: "data"
              mountPath: /opt/nifi/data
            - name: "logs"
              mountPath: /opt/nifi/nifi-current/logs
            - name: "bootstrap-conf"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
              subPath: "bootstrap.conf"
            - name: "nifi-properties"
              mountPath: /opt/nifi/nifi-current/conf/nifi.temp
              subPath: "nifi.temp"
            - name: "authorizers-temp"
              mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
              subPath: "authorizers.temp"
            - name: "authorizers-empty"
              mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
              subPath: "authorizers.empty"
            - name: "bootstrap-notification-services-xml"
              mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
              subPath: "bootstrap-notification-services.xml"
            - name: "login-identity-providers-temp"
              mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.temp
              subPath: "login-identity-providers.temp"
            - name: "state-management-xml"
              mountPath: /opt/nifi/nifi-current/conf/state-management.xml
              subPath: "state-management.xml"
            - name: "flow-content"
              mountPath: /opt/nifi/data/flow.xml
              subPath: "flow.xml"
        - name: app-log
          imagePullPolicy: "IfNotPresent"
          image: busybox
          args: [tail, -n+1, -F, /var/log/nifi-app.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - name: logs
              mountPath: /var/log
        - name: bootstrap-log
          imagePullPolicy: "IfNotPresent"
          image: busybox
          args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - name: logs
              mountPath: /var/log
        - name: user-log
          imagePullPolicy: "IfNotPresent"
          image: busybox
          args: [tail, -n+1, -F, /var/log/nifi-user.log]
          resources:
            limits:
              cpu: 50m
              memory: 50Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
            - name: logs
              mountPath: /var/log
      volumes:
        - name: "bootstrap-conf"
          configMap:
            name: nifi-config
            items:
              - key: "bootstrap.conf"
                path: "bootstrap.conf"
        - name: "nifi-properties"
          configMap:
            name: nifi-config
            items:
              - key: "nifi.properties"
                path: "nifi.temp"
        - name: "authorizers-temp"
          configMap:
            name: nifi-config
            items:
              - key: "authorizers.xml"
                path: "authorizers.temp"
        - name: "authorizers-empty"
          configMap:
            name: nifi-config
            items:
              - key: "authorizers-empty.xml"
                path: "authorizers.empty"
        - name: "bootstrap-notification-services-xml"
          configMap:
            name: nifi-config
            items:
              - key: "bootstrap-notification-services.xml"
                path: "bootstrap-notification-services.xml"
        - name: "login-identity-providers-temp"
          configMap:
            name: nifi-config
            items:
              - key: "login-identity-providers.xml"
                path: "login-identity-providers.temp"
        - name: "state-management-xml"
          configMap:
            name: nifi-config
            items:
              - key: "state-management.xml"
                path: "state-management.xml"
        - name: "flow-content"
          configMap:
            name: nifi-config
            items:
              - key: "flow.xml"
                path: "flow.xml"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: logs
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: $(storage_class)
        resources:
          requests:
            storage: 5Gi