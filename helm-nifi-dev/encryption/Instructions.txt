- The Groovy script requires BouncyCastle and Apache Commons Crypto libraries.  BouncyCastle is used for reading the PEM-encoded public keys and RSA-KEM operations.  Apache Commons Crypto does the bulk AES-GCM encryption.  It is used due to limitations within the Cipher API of many Java implementations.

- Create a folder and copy your private key and our public key into it.  This folder should contain a copy of your private key named uuid_private.pem in PEM-encoded PKCS8 format, along with a copy of our public key in PEM format, named uuid_public.pem.  Make sure the user under which NiFi is running has permission to read these keys.

- Import the included template (RsaKem-AesGcm-ApacheCommons-NiFiTemplate.xml) into NiFi and drag an instance of this template onto your canvas.

- Set the properties on the two ExecuteGroovyScript processors (right click on them and go to Configure) to match your environment.  Specifically, you will need to set the Additional class path to the jars for BouncyCastle and ApacheCommonsCrypto, the key folder, and (for encryption-only) the UUID of the recipient's key

- Adjust the flow to fit into your flow.  The GetFile and PutFile processors are just examples of how you can get a file to encrypt or decrypt.



Notes:
	- The Encrypt script will automatically append ".enc" to the filename upon successful encryption.  The Decrypt script will automatically remove ".enc" from the end of the file upon successful decryption
	
	- Depending on your environment, you may need to create a symlink for libcrypto.so since this is where Apache Commons Crypto looks for the OpenSSL lib.  This was required in one of our environments:
		sudo ln -s /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1 /usr/lib/x86_64-linux-gnu/libcrypto.so
	
	- Copies of the Groovy scripts are also included in this folder, but you should not need to do anything with them.  They are already included in the template.